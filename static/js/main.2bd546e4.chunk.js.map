{"version":3,"sources":["components/Members/Members.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["members","props","map","member","className","key","id","style","margin","first_name","last_name","onClick","editButtonClick","deleteButtonClick","form","onSubmit","onSubmitForm","type","name","value","onChange","disabled","buttonDisabled","App","inputOnchangeHandler","event","setState","target","onSubmitHandler","e","preventDefault","payload","state","url","formStatus","addMember","memberIdSelected","editMember","axios","post","then","response","push","data","catch","error","console","log","put","indexMember","findIndex","editButtonHandler","deleteButtonHandler","delete","status","index","splice","get","border","Members","this","Form","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2bd546e4.chunk.js","sourcesContent":["import React from 'react'\nimport Member from './Member'\n\nconst members = (props) =>( \n    props.members.map((member) => ( \n        <div className=\"col-md-6\" key={member.id}>\n            <div className=\"card\" style={{ margin: 10 }}>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{member.id}</h5>\n                    <h5 className=\"card-title\">{member.first_name}</h5>\n                    <h5 className=\"card-title\">{member.last_name}</h5>\n                    <button \n                    className=\"btn btn-primary\" \n                    onClick={()=> props.editButtonClick(member)}>Edit</button>\n                    <button \n                    className=\"btn btn-danger\"\n                    onClick={() => props.deleteButtonClick(member.id)}>Delete</button>\n                </div>\n            </div>\n        </div>\n    )) \n)\n\nexport default members\n\n\n    \n","import React from 'react'\n\nconst form = (props) => (\n    <form onSubmit={props.onSubmitForm}>\n        <div className=\"form-group\">\n        <label>First Name</label>\n        <input \n            type=\"text\" \n            className=\"form-control\"\n            name=\"first_name\"\n            value={props.first_name}\n            onChange={props.onChange}\n        />\n        </div>\n\n        <div className=\"form-group\">\n        <label>Last Name</label>\n        <input \n            type=\"text\" \n            className=\"form-control\"\n            name=\"last_name\"\n            value={props.last_name} \n            onChange={props.onChange}\n        />\n        </div>\n        <button \n            type=\"submit\" \n            className=\"btn btn-primary\"\n            disabled={props.buttonDisabled}\n        >\n            Submit\n        </button>\n    </form>\n)\n\nexport default form","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Members from './components/Members/Members';\nimport Form from './components/Form/Form';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      members: [],\n      first_name: '',\n      last_name: '',\n      buttonDisabled: false,\n      formStatus: 'create',\n      memberIdSelected: null,\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get('https://reqres.in/api/users?page=1')\n      .then(response => {\n        this.setState({ members: response.data.data });\n      })\n      .catch(error => {\n        console.log('error', error);\n      });\n  }\n\n  inputOnchangeHandler = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  onSubmitHandler = e => {\n    e.preventDefault();\n    this.setState({ buttonDisabled: true });\n    var payload = {\n      first_name: this.state.first_name,\n      last_name: this.state.last_name,\n    };\n\n    // url untuk form create\n    var url = 'https://reqres.in/api/users';\n    if (this.state.formStatus === 'create') {\n      this.addMember(url, payload);\n    } else {\n      // url untuk form edit\n      url = `https://reqres.in/api/users/${this.state.memberIdSelected}`;\n      this.editMember(url, payload);\n    }\n  };\n\n  addMember = (url, payload) => {\n    axios\n      .post(url, payload)\n      .then(response => {\n        var members = [...this.state.members];\n        members.push(response.data);\n        this.setState({ members, buttonDisabled: false, first_name: '', last_name: '' });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  editMember = (url, payload) => {\n    axios\n      .put(url, payload)\n      .then(response => {\n        var members = [...this.state.members];\n        var indexMember = members.findIndex(member => member.id === this.state.memberIdSelected);\n\n        // mengganti data yang ada dalam state members dan index yang sesuai\n        members[indexMember].first_name = response.data.first_name;\n        members[indexMember].last_name = response.data.last_name;\n        this.setState({\n          members,\n          buttonDisabled: false,\n          first_name: '',\n          last_name: '',\n          formStatus: 'create',\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  editButtonHandler = member => {\n    this.setState({\n      first_name: member.first_name,\n      last_name: member.last_name,\n      formStatus: 'edit',\n      memberIdSelected: member.id,\n    });\n  };\n\n  deleteButtonHandler = id => {\n    var url = `https://reqres.in/api/users/${id}`;\n    axios\n      .delete(url)\n      .then(response => {\n        if (response.status === 204) {\n          var members = [...this.state.members];\n          var index = members.findIndex(member => member.id === id);\n          members.splice(index, 1);\n          this.setState({ members });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Codepolitan DevSchool</h1>\n        <div className=\"row\">\n          <div className=\"col-6\" style={{ border: '1px solid black' }}>\n            <h2>Member</h2>\n            <div className=\"row\">\n              {/* USE THIS CODE BEFORE USING COMPONENT <Members />\n            { this.state.members.map((member) => (\n              <div className=\"col-md-6\" key={member.id}>\n                <div className=\"card\" style={{ margin: 10}}>\n                  <div className=\"card-body\">\n                  <h5 className=\"card-title\">{member.id}</h5>\n                    <h5 className=\"card-title\">{member.first_name}</h5>\n                    <h5 className=\"card-title\">{member.last_name}</h5>\n                    <button \n                      className=\"btn btn-primary\" \n                      onClick={() => this.editButtonHandler(member)}\n                    >\n                      Edit\n                    </button>\n                    <button \n                      className=\"btn btn-danger\"\n                      onClick={() => this.deleteButtonHandler(member.id)}  \n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))} */}\n\n              <Members\n                members={this.state.members}\n                editButtonClick={member => this.editButtonHandler(member)}\n                deleteButtonClick={id => this.deleteButtonHandler(id)}\n              />\n            </div>\n          </div>\n\n          <div className=\"col-6\" style={{ border: '1px solid black' }}>\n            <h2>Form {this.state.formStatus}</h2>\n\n            {/* USE THIS CODE BEFORE USING COMPONENT <Form />\n            <form onSubmit={this.onSubmitHandler}>\n              <div className=\"form-group\">\n                <label>First Name</label>\n                <input \n                  type=\"text\" \n                  className=\"form-control\"\n                  name=\"first_name\"\n                  value={this.state.first_name}\n                  onChange={this.inputOnchangeHandler}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Last Name</label>\n                <input \n                  type=\"text\" \n                  className=\"form-control\"\n                  name=\"last_name\"\n                  value={this.state.last_name} \n                  onChange={this.inputOnchangeHandler}\n                />\n              </div>\n              <button \n                type=\"submit\" \n                className=\"btn btn-primary\"\n                disabled={this.state.buttonDisabled}\n              >\n                Submit\n              </button>\n            </form> */}\n            <Form\n              onSubmitForm={this.onSubmitHandler}\n              onChange={this.inputOnchangeHandler}\n              first_name={this.state.first_name}\n              last_name={this.state.last_name}\n              buttonDisabled={this.state.buttonDisabled}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}